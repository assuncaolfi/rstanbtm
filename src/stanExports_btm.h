// Generated by rstantools.  Do not edit by hand.

/*
    rstanbtm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanbtm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanbtm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_btm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_btm");
    reader.add_event(28, 26, "end", "model_btm");
    return reader;
}
#include <stan_meta_header.hpp>
class model_btm
  : public stan::model::model_base_crtp<model_btm> {
private:
        int K;
        int V;
        int N;
        std::vector<int> ti;
        std::vector<int> tj;
        vector_d alpha;
        vector_d beta;
public:
    model_btm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_btm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_btm_namespace::model_btm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 2);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "V", "int", context__.to_vec());
            V = int(0);
            vals_i__ = context__.vals_i("V");
            pos__ = 0;
            V = vals_i__[pos__++];
            check_greater_or_equal(function__, "V", V, 2);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("ti", "N", N);
            context__.validate_dims("data initialization", "ti", "int", context__.to_vec(N));
            ti = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("ti");
            pos__ = 0;
            size_t ti_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < ti_k_0_max__; ++k_0__) {
                ti[k_0__] = vals_i__[pos__++];
            }
            size_t ti_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < ti_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ti[i_0__]", ti[i_0__], 1);
                check_less_or_equal(function__, "ti[i_0__]", ti[i_0__], V);
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("tj", "N", N);
            context__.validate_dims("data initialization", "tj", "int", context__.to_vec(N));
            tj = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tj");
            pos__ = 0;
            size_t tj_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tj_k_0_max__; ++k_0__) {
                tj[k_0__] = vals_i__[pos__++];
            }
            size_t tj_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < tj_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tj[i_0__]", tj[i_0__], 1);
                check_less_or_equal(function__, "tj[i_0__]", tj[i_0__], V);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("alpha", "K", K);
            context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(K));
            alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            size_t alpha_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                alpha(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "alpha", alpha, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("beta", "V", V);
            context__.validate_dims("data initialization", "beta", "vector_d", context__.to_vec(V));
            beta = Eigen::Matrix<double, Eigen::Dynamic, 1>(V);
            vals_r__ = context__.vals_r("beta");
            pos__ = 0;
            size_t beta_j_1_max__ = V;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                beta(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "beta", beta, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("theta", "K", K);
            num_params_r__ += (K - 1);
            current_statement_begin__ = 12;
            validate_non_negative_index("phi", "V", V);
            validate_non_negative_index("phi", "K", K);
            num_params_r__ += ((V - 1) * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_btm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 11;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "K", K);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(K);
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "V", V);
        validate_non_negative_index("phi", "K", K);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(K,V));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > phi(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(V));
        size_t phi_j_1_max__ = V;
        size_t phi_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                phi[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t phi_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 11;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.simplex_constrain(K, lp__);
            else
                theta = in__.simplex_constrain(K);
            current_statement_begin__ = 12;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > phi;
            size_t phi_d_0_max__ = K;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.simplex_constrain(V, lp__));
                else
                    phi.push_back(in__.simplex_constrain(V));
            }
            // model body
            current_statement_begin__ = 16;
            lp_accum__.add(dirichlet_log<propto__>(theta, alpha));
            current_statement_begin__ = 17;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 18;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(phi, k, "phi", 1), beta));
            }
            current_statement_begin__ = 20;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 21;
                validate_non_negative_index("gamma", "K", K);
                std::vector<local_scalar_t__  > gamma(K, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(gamma, DUMMY_VAR__);
                stan::math::fill(gamma, DUMMY_VAR__);
                current_statement_begin__ = 22;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 23;
                    stan::model::assign(gamma, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(theta, k, "theta", 1)) + stan::math::log(get_base1(get_base1(phi, k, "phi", 1), get_base1(ti, n, "ti", 1), "phi", 2))) + stan::math::log(get_base1(get_base1(phi, k, "phi", 1), get_base1(tj, n, "tj", 1), "phi", 2))), 
                                "assigning variable gamma");
                }
                current_statement_begin__ = 24;
                lp_accum__.add(log_sum_exp(gamma));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("phi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(V);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_btm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.simplex_constrain(K);
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > phi;
        size_t phi_d_0_max__ = K;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.simplex_constrain(V));
        }
        size_t phi_j_1_max__ = V;
        size_t phi_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                vars__.push_back(phi[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_btm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = V;
        size_t phi_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = (V - 1);
        size_t phi_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_btm_namespace::model_btm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
